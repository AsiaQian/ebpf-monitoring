# service_account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ebpf-agent-sa
  namespace: monitoring
---
# cluster_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ebpf-agent-reader
rules:
  - apiGroups: [""] # "" 表示核心 API 组 (pods, services)
    resources: ["pods", "services", "endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"] # "apps" 组 (deployments, statefulsets, daemonsets)
    resources: ["deployments", "statefulsets", "daemonsets"]
    verbs: ["get", "list", "watch"]
---
# cluster_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ebpf-agent-reader-binding
subjects:
  - kind: ServiceAccount
    name: ebpf-agent-sa
    namespace: monitoring
roleRef:
  kind: ClusterRole
  name: ebpf-agent-reader
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ebpf-agent
  namespace: monitoring # 部署到 Prometheus 所在的监控命名空间
  labels:
    app: ebpf-agent
spec:
  selector:
    matchLabels:
      app: ebpf-agent
  template:
    metadata:
      labels:
        app: ebpf-agent
    spec:
      hostNetwork: true # 使用宿主机网络，简化 Prometheus 抓取
      hostPID: true
      serviceAccountName: ebpf-agent-sa # 可以使用默认服务账号，或为Agent创建一个专用服务账号
      # 容忍污点，确保在主节点上也能运行 (对Minikube这种单节点集群很重要)
      tolerations:
        - operator: Exists
          effect: NoSchedule
      containers:
        - name: ebpf-agent
          command:
            - /bin/sh
            - -c
            - sleep infinity
          image: ebpf-agent:latest # 使用我们刚刚构建的镜像
          imagePullPolicy: Never   # 关键：指示Kubernetes不要尝试从远程仓库拉取镜像，只使用本地镜像
          securityContext:
            privileged: true      ç # 关键：赋予Pod特权，允许eBPF操作内核
            capabilities:          # 更细粒度的权限控制，可以替代 privileged: true
              add: ["BPF", "PERFMON", "SYS_ADMIN", "NET_ADMIN"] # BPF, PERFMON for eBPF, SYS_ADMIN for general kernel ops, NET_ADMIN for network
          volumeMounts:
            - name: lib-modules
              mountPath: /lib/modules # 挂载宿主机的内核模块目录
              readOnly: true
            - name: usr-src
              mountPath: /usr/src     # 挂载宿主机的内核源代码头文件目录
              readOnly: true
            - name: tmpfs-bcc
              mountPath: /tmp/bcc     # 为bcc编译创建临时目录（可能需要）
            - name: tracing # 明确挂载 tracefs
              mountPath: /sys/kernel/tracing
              readOnly: false
            - name: host-sys-kernel-debug
              mountPath: /sys/kernel/debug
            - name: host-proc
              mountPath: /proc
              readOnly: true
          ports:
            - containerPort: 8000     # 容器内部Prometheus Exporter监听的端口
              hostPort: 8000          # 暴露到宿主机的 8000 端口
              name: http-metrics
          env:
            - name: NODE_NAME # 将节点名称作为环境变量传入，可能用于日志或调试
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
      volumes:
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: usr-src
          hostPath:
            path: /usr/src
        - name: tracing
          hostPath:
            path: /sys/kernel/tracing
        - name: host-sys-kernel-debug
          hostPath:
            path: /sys/kernel/debug
        - name: host-proc
          hostPath:
            path: /proc
        - name: tmpfs-bcc
          emptyDir: {} # 临时目录，Pod重启会清空