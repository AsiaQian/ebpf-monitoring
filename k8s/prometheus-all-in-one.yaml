# 1. 命名空间：用于组织监控相关的资源
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
# 2. 集群角色：Prometheus 发现和抓取 Kubernetes 资源的权限
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""] # 核心 API 组 (Pod, Service, Node 等)
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
      - configmaps
    verbs: ["get", "list", "watch"] # 允许获取、列出和监控这些资源
  - apiGroups: ["extensions", "networking.k8s.io"] # Ingress 资源的 API 组
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
---
# 3. 服务账号：Prometheus Pod 将使用的身份
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring # 属于 monitoring 命名空间
---
# 4. 集群角色绑定：将服务账号与集群角色关联起来，赋予权限
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-cluster-role-binding
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: monitoring
roleRef:
  kind: ClusterRole
  name: prometheus
  apiGroup: rbac.authorization.k8s.io # <-- **关键修复：将这里改为 rbac.authorization.k8s.io**
---
# 5. 配置映射：存储 Prometheus 的主配置文件 prometheus.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s # 默认的抓取间隔
      evaluation_interval: 15s

    scrape_configs:
      # Job 1: 抓取 Kubernetes 节点 (如果 Minikube VM 上有 node_exporter 或 kubelet metrics)
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - source_labels: [__address__]
            regex: '(.*):10250'
            replacement: '${1}:9100'
            action: replace
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __metrics_path__
            replacement: /metrics

      # Job 2: 抓取 Kubernetes Pods（包括 Java 应用）的指标
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
          # <--- **关键修改：移除这里的 namespaces 字段，以便在所有命名空间发现 Pod**
          # names: ['monitoring'] # 之前可能有的，现在删除
        relabel_configs:
          # 只抓取带有 "prometheus.io/scrape: true" annotation 的 Pod
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          # 使用 "prometheus.io/path" annotation 指定指标路径（如果存在）
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          # 使用 "prometheus.io/port" annotation 指定目标端口
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: (.+):(.+)
            target_label: __address__
            replacement: $1:$2
          # 将 Kubernetes Pod 标签映射为 Prometheus 标签
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
          - source_labels: [__meta_kubernetes_pod_container_name]
            action: replace
            target_label: kubernetes_container_name

      # Job 3: 抓取 eBPF Agent DaemonSet 的指标
      - job_name: 'ebpf-agent'
        kubernetes_sd_configs:
          - role: pod
          # <--- **关键修改：移除这里的 namespaces 字段，以便在所有命名空间发现 Pod**
          # names: ['monitoring'] # 之前有的，现在删除
        relabel_configs:
          # 仅保留带有 app: ebpf-agent 标签的 Pod
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: ebpf-agent
            action: keep
          # 将抓取目标地址替换为 Pod 所在节点的 IP 和 HostPort (8000)
          - source_labels: [__meta_kubernetes_pod_host_ip]
            target_label: __address__
            replacement: '$1:8000'
          # 添加一些有用的标签
          - source_labels: [__meta_kubernetes_pod_node_name]
            target_label: node_name
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod_name
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
---
# 6. 部署：Prometheus Server 的 Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  replicas: 1 # 运行一个 Prometheus 实例
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus # 使用我们之前创建的服务账号
      containers:
        - name: prometheus
          image: prom/prometheus:v2.44.0 # 使用一个稳定版本的 Prometheus 镜像
          args:
            - "--config.file=/etc/prometheus/prometheus.yml" # 指定配置文件路径
            - "--storage.tsdb.path=/prometheus" # 指定数据存储路径
            - "--web.console.libraries=/usr/share/prometheus/console_libraries"
            - "--web.console.templates=/usr/share/prometheus/consoles"
          ports:
            - containerPort: 9090 # Prometheus UI 监听的端口
          volumeMounts:
            - name: prometheus-config-volume # 挂载配置文件 ConfigMap
              mountPath: /etc/prometheus
            - name: prometheus-storage # 挂载数据存储卷
              mountPath: /prometheus
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: prometheus-config # 引用 prometheus-config ConfigMap
        - name: prometheus-storage
          emptyDir: {} # 临时存储，Pod 重启数据会丢失。生产环境请使用 PersistentVolumeClaim。
---
# 7. 服务：Prometheus Service (NodePort 类型用于外部访问)
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
  type: NodePort