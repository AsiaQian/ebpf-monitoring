# Dockerfile (纯净语法 + 完整项目拷贝 + 容器内 Git 初始化)

FROM ubuntu:22.04

ENV HTTP_PROXY="http://192.168.5.2:7890"
ENV HTTPS_PROXY="http://192.168.5.2:7890"
ENV NO_PROXY="localhost,127.0.0.1,colima.internal,colima.local,*.local,*.test"

ENV DEBIAN_FRONTEND=noninteractive
ENV BCC_SRC=/app/docker/deps/bcc
ENV BCC_BUILD=/tmp/bcc_build

RUN echo 'Acquire::Retries "5";' > /etc/apt/apt.conf.d/80retries && \
    echo 'Acquire::HTTP::Timeout "90";' >> /etc/apt/apt.conf.d/80timeout && \
    echo 'Acquire::FTP::Timeout "90";' >> /etc/apt/apt.conf.d/80timeout && \
    echo 'Acquire::Queue-Timeout "180";' >> /etc/apt/apt.conf.d/80timeout && \
    cp /etc/apt/sources.list /etc/apt/sources.list.bak && \
    echo "deb http://mirrors.aliyun.com/ubuntu-ports/ jammy main restricted universe multiverse" > /etc/apt/sources.list && \
    echo "deb http://mirrors.aliyun.com/ubuntu-ports/ jammy-updates main restricted universe multiverse" >> /etc/apt/sources.list && \
    echo "deb http://mirrors.aliyun.com/ubuntu-ports/ jammy-security main restricted universe multiverse" >> /etc/apt/sources.list && \
    echo "deb http://mirrors.aliyun.com/ubuntu-ports/ jammy-backports main restricted universe multiverse" >> /etc/apt/sources.list && \
    apt update && \
    apt install -y ca-certificates && \
    update-ca-certificates && \
    sed -i 's@http://mirrors.aliyun.com/ubuntu-ports@https://mirrors.aliyun.com/ubuntu-ports@g' /etc/apt/sources.list && \
    apt update && \
    apt install -y \
    git \
    build-essential \
    cmake \
    python3 \
    python3-dev \
    python3-pip \
    llvm-14 \
    clang-14 \
    libclang-14-dev \
    libelf-dev \
    libfl-dev \
    bison \
    flex \
    zlib1g-dev \
    libdebuginfod-dev \
    libbpf-dev \
    pkg-config \
    curl \
    iputils-ping \
    net-tools \
    vim \
    lsof \
    iproute2 \
    zip \
    iperf \
    arping \
    kmod \
    sudo \
    vim \
    curl \
    lsof \
    iproute2 \
    netperf \
    linux-headers-$(uname -r) && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# 复制整个项目内容到容器中
# 这将把本地的 your_project/ 目录的所有内容，包括 .gitmodules 和 deps/bcc，
# 复制到容器的 /app 目录。
# 确保在 your_project/ 根目录执行 docker build 命令
COPY . /app/

# 在复制的仓库中初始化和更新子模块
# 这将确保 BCC 及其子模块（如 libbpf）在容器内部是一个完整的 Git 仓库
RUN cd /app && \
    git submodule update --init --recursive

# 创建 BCC 构建目录
RUN mkdir -p ${BCC_BUILD}

# 编译和安装 BCC
#RUN chmod +x /app/docker/build-bcc.sh && /app/docker/build-bcc.sh
RUN cd ${BCC_BUILD} && \
        cmake ${BCC_SRC} \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DPYTHON_CMD=python3 \
          -DCMAKE_BUILD_TYPE=Release && \
        make -j4 && \
        make install && \
        rm -rf ${BCC_BUILD}/*

# 配置运行时环境
ENV PATH="/usr/share/bcc/tools:${PATH}"
ENV LD_LIBRARY_PATH="/usr/lib/aarch64-linux-gnu:/usr/lib"

# 验证安装
RUN python3 -c "from bcc import BPF; print('BCC installed successfully')"